# Settings in the [build] context are global and are applied to all contexts
# unless otherwise overridden by more specific contexts.
[build]
  # Directory to change to before starting a build.
  # This is where we will look for package.json/.nvmrc/etc.
  # If not set, defaults to the root directory.
  #   base = "project/"

  # Directory that contains the deploy-ready HTML files and assets generated by
  # the build. This is relative to the base directory if one has been set, or the
  # root directory if a base has not been set. This sample publishes the
  # directory located at the absolute path "root/project/build-output"
  publish = "public/"

  # Default build command.
  # command = "echo 'default context'"
  functions = "netlify/functions"
  command = "npm build"

[[plugins]]
  # Installs the Lighthouse Build Plugin for all deploy contexts
  package = "@netlify/plugin-lighthouse"


[[redirects]]
    from = "/api/*"
    # to = ".netlify/functions/:splat"
    to = ".netlify/functions/"
    status = 200
    force = true # COMMENT: ensure that we always redirect


# Production context: all deploys from the Production branch set in your site’s
# Branches settings in the UI will inherit these settings.
# [context.production]
#   publish = "public/"
#   command = "make publish"
#   environment = { ACCESS_TOKEN = "super secret", NODE_VERSION = "14.15.3" }

  
# # Here is another way to define context specific environment variables.
# [context.deploy-preview.environment]
#   ACCESS_TOKEN = "not so secret"

# Specific branch context: all deploys from this specific branch will inherit
# these settings.
[context.staging] # “staging” is a branch name
  command = "echo 'staging'"
  base = "staging"

# For contexts of branches with special characters, enclose the branch name
# with quotes.
[context."feat/branch"]
  command = "echo 'special branch'"
  base = "branch"


# Deploy Preview context: all deploys generated from a pull/merge request will
# inherit these settings.
[context.deploy-preview]
  publish = "public/"

# # Here is another way to define context specific environment variables.
# [context.deploy-preview.environment]
#   ACCESS_TOKEN = "not so secret"

# Branch Deploy context: all deploys that are not from a pull/merge request or
# from the Production branch will inherit these settings.
[context.branch-deploy]
  command = "echo branch"
[context.branch-deploy.environment]
  NODE_ENV = "development"


# Redirects and headers are GLOBAL for all builds – they do not get scoped to
# contexts no matter where you define them in the file.
# For context-specific rules, use _headers or _redirects files, which are
# PER-DEPLOY.

# A basic redirect rule
# [[redirects]]
#   from = "/*"
#   to = "/blog/:splat"

# A redirect rule with many of the supported properties
# [[redirects]]
#   from = "/old-path"
#   to = "/new-path"

#   # The default HTTP status code is 301, but you can define a different one.
#   status = 302

#   # By default, redirects won’t be applied if there’s a file with the same
#   # path as the one defined in the `from` property. Setting `force` to `true`
#   # will make the redirect rule take precedence over any existing files.
#   force = true

#   # Redirect from /old-path?id=123 to /new-path. Each combination of query
#   # params needs to be defined in a separate [[redirects]] block.
#   # More information at https://docs.netlify.com/routing/redirects/redirect-options/#query-parameters
#   query = {id = ":id"}

#   # Redirect based on conditions including browser language, geolocation, 
#   # identity role, and/or cookie presence.
#   conditions = {Language = ["en"], Country = ["US"]}

#   # Sign each request with a value defined in an environment variable
#   signed = "API_SIGNATURE_TOKEN"

#   # You can also define custom headers within your redirects blocks.
#   [redirects.headers]
#     X-From = "Netlify"
#     X-Api-Key = "some-api-key-string"

# Role-based redirects do not have a “to” property.
[[redirects]]
  from = "/admin"
  status = 200
  conditions = {Role = ["admin"]}
  force = true
  to = '/admin'

# The following redirect is intended for use with most SPAs that handle
# routing internally.
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[[headers]]
  # Define which paths this specific [[headers]] block will cover.
  for = "/*"

  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    Content-Security-Policy = "frame-ancestors https://www.facebook.com"

    # Multi-value headers are expressed with multi-line strings.
	cache-control = '''
	max-age=0,
	no-cache,
	no-store,
	must-revalidate'''

    # Basic-Auth allows you to password protect your whole site.
    # This feature may not be available on all plans.
    # Basic-Auth = "someuser:somepassword anotheruser:anotherpassword"

[functions]
  # Directory with serverless functions, including background functions,
  # to deploy. This is relative to the base directory if one has been set, 
  # or the root directory if a base hasn’t been set.
  directory = "netlify/functions/"

# An Edge Handler declaration
[[edge_handlers]]
  path = "/*"
  handler = "filterRequests"


  
# note: each of these fields are OPTIONAL
[dev]
  command = "npm run develop" # Command to start your dev server
  targetPort = 8001 # The port for your application server, framework or site generator
  port = 3001 # The port that the netlify dev will be accessible on
  publish = "public" # The path to your static content folder
  # jwtSecret = "secret" # The secret used to verify tokens for JWT based redirects
  # jwtRolePath = "app_metadata.authorization.roles" # Object path we should look for role values for JWT based redirects
  autoLaunch = true # a Boolean value that determines if Netlify Dev launches the local server address in your browser


  # to start an https server instead of an http one, configure a certificate and key files
  # https://medium.com/beyond-the-helpdesk/lets-encrypt-for-windows-10-e07556c811b4 get lets encrypt cert, or have netlify create one for you
  # [dev.https]
  #   certFile = "cert.pem" # path to the certificate file
  #   keyFile = "key.pem" # path to the private key file

 